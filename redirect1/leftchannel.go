package redirect1

import (
	"github.com/advanced-go/intelagents/common1"
	"github.com/advanced-go/stdlib/messaging"
)

// run - ingress resiliency for the LHC
// r.handler.AddActivity(r.agentId, "onTick")
func runRedirectLHC(r *redirect, events *common1.Events) {
	origin := redirectOrigin(r.origin, r.state.Location)
	ticker := messaging.NewTicker(redirectDuration)
	stepTicker := messaging.NewTicker(r.state.StepDuration)

	// Set the thresholds to the current host's, and use that to compare to the redirect host's actual thresholds
	observe := newObserver(r, events)
	//limitPercent := timeseries1.Threshold{}
	//common1.SetPercentileThreshold(r.handler, r.origin, &limitPercent, observe)
	//limitStatusCode := timeseries1.Threshold{}
	//to := time.Now().UTC()
	//common1.SetStatusCodesThreshold(r.handler, r.origin, &limitStatusCode, to.Add(-time.Minute*30), to, common1.DefaultStatusCodes, observe)

	// Need to do observations on timeseries percentile and status codes thresholds.
	// Need to also create the limits for these thresholds.
	// Limit of percentiles is generated by system, limits for status codes are in the redirect entry
	//

	ticker.Start(-1)
	stepTicker.Start(-1)
	for {
		// observation processing
		select {
		case <-ticker.C():
			// Need percentage and status code thresholds
			o, status := observe.observation(r, origin, events)
			if status.OK() {
				m := messaging.NewRightChannelMessage(r.agentId, r.agentId, messaging.ObservationEvent, o)
				r.Message(m)
			}
		case <-stepTicker.C():
			m := messaging.NewRightChannelMessage(r.agentId, r.agentId, messaging.TickEvent, nil)
			r.Message(m)
		default:
		}
		// message processing
		select {
		case msg := <-r.lhc.C:
			switch msg.Event() {
			case messaging.ShutdownEvent:
				ticker.Stop()
				r.lhc.Close()
				return
			//case messaging.DataChangeEvent:
			default:
				r.handler.Handle(common1.MessageEventErrorStatus(r.agentId, msg))
			}
		default:
		}
	}
}
